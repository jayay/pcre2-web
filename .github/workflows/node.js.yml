# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]
  release:
    types: [created]
  schedule:
    - cron: "47 21 * * *"

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      actions: "write"

    steps:
      - uses: actions/checkout@v5
      - uses: nixbuild/nix-quick-install-action@v34
        with:
          nix_conf: |
            keep-env-derivations = true
            keep-outputs = true

      - name: Restore and save Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          # restore and save a cache using this key
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', 'package-lock.json', 'nixpkgs-rev.json') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ runner.os }}-
          # collect garbage until the Nix store size (in bytes) is at most this number
          # before trying to save a new cache
          gc-max-store-size-linux: 1G
          # do purge caches
          purge: true
          # purge all versions of the cache
          purge-prefixes: nix-${{ runner.os }}-
          # created more than this number of seconds ago
          purge-created: 0
          # or, last accessed more than this number of seconds ago
          # relative to the start of the `Post Restore and save Nix store` phase
          purge-last-accessed: 0
          # except any version with the key that is the same as the `primary-key`
          purge-primary-key: never

      - run: nix-build ./package.nix

      - uses: actions/upload-artifact@v4
        with:
          name: pkg
          path: result/
          if-no-files-found: error

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "npm"
      - run: npm ci
      - run: node_modules/.bin/eslint .

  update:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: nixbuild/nix-quick-install-action@v34
        with:
          nix_conf: |
            keep-env-derivations = true
            keep-outputs = true

      - name: Restore and save Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          # restore and save a cache using this key
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', 'package-lock.json', 'nixpkgs-rev.json') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ runner.os }}-
          # collect garbage until the Nix store size (in bytes) is at most this number
          # before trying to save a new cache
          gc-max-store-size-linux: 1G
          # do purge caches
          purge: true
          # purge all versions of the cache
          purge-prefixes: nix-${{ runner.os }}-
          # created more than this number of seconds ago
          purge-created: 0
          # or, last accessed more than this number of seconds ago
          # relative to the start of the `Post Restore and save Nix store` phase
          purge-last-accessed: 0
          # except any version with the key that is the same as the `primary-key`
          purge-primary-key: never

      - run: ./update.nu
      - uses: gr2m/create-or-update-pull-request-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          title: "Update nixpkgs"
          body: "Updates nixpkgs to latest commit"
          branch: "update-nixpkgs"
          path: "nixpkgs-rev.json"
          commit-message: "Update to latest nixpkgs revision"
          assignees: jayay
          auto-merge: rebase
          update-pull-request-title-and-body: true

  release:
    if: github.event_name == 'release' && github.event.action == 'created'
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v5
        with:
          node-version: "18.x"
          registry-url: "https://npm.pkg.github.com"
          scope: "@jayay"
      - run: npm ci
      - uses: actions/download-artifact@v4
        with:
          name: pkg
          path: pkg
      - run: npm run release
        env:
          PACKAGE_VERSION: ${{ github.ref_name }}
      - run: npm publish pkg/
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
